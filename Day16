I.)Get equal substring with budget
code:
int equalSubstring(string s, string t, int maxcost) {
        int n=s.size();
        int arr[n];
        for(int i=0;i<n;i++)
            arr[i]=abs(s[i]-t[i]);
        int cost=0,start=0,maxlen=INT_MIN;
        for(int i=0;i<n;i++){
            cost+=arr[i];
            while(cost>maxcost){
                cost-=arr[start];
                start++;
            }
            maxlen=max(maxlen,i-start+1);
        }
        return maxlen;
    }

II.)FInd players with zero or one losses
code:
vector<vector<int>> findWinners(vector<vector<int>>& matches) {
        vector<vector<int>>ans;
         map<int,int>win,loss;
         for(auto it:matches){
             win[it[0]]++;
             loss[it[1]]++;
         }
         vector<int>win1,win2;
         for(auto it:win){
             if(loss.find(it.first)==loss.end()){
                 win1.push_back(it.first);
                 
             }
         }
         for(auto it:loss){
             if(it.second==1)win2.push_back(it.first);
         }
         ans.push_back(win1);
         ans.push_back(win2);
         return ans;
    }

III.)Special permutations
code:

long long dp[14][(1<<14)];
    int mod=1e9+7;
    long long solve(int prevValidx, int mask, vector<int>&nums){
        if(mask+1 ==(1<<nums.size()))return 1;
        if(dp[prevValidx][mask]!=-1)return dp[prevValidx][mask];
        long long ans=0;
        for(int i=0;i<nums.size();i++){
            int val=nums[prevValidx];
            if((mask&(1<<i))==0 && (val%nums[i]==0 || nums[i]%val==0)){
                int newmask=(mask|(1<<i));
                long long temp =solve(i,newmask,nums);
                ans=(ans+temp)%mod;
            }
        }
        return dp[prevValidx][mask]=ans;
    }

    int specialPerm(vector<int>& nums) {
        int n=nums.size();
        memset(dp,-1,sizeof(dp));
        long long ans=0;
        for(int i=0;i<n;i++){
            int mask=(1<<i);
            ans=(ans+solve(i,mask,nums))%mod;
        }
        return ans;
    }
