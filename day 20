I.)cinema seat allocation
  code:
int maxNumberOfFamilies(int n, vector<vector<int>>& res) {
        unordered_map<int, vector<int>> mp;
        for(int i = 0; i < res.size(); i++) {
            mp[res[i][0]].push_back(res[i][1]);
        }
        int count = 0;
        int rows = 0;
        for(auto it : mp) {
            rows++;
            vector<int> v = it.second;
            sort(v.begin(), v.end());
            for(int i = 2; i <= 6;) {
                auto lb = lower_bound(v.begin(), v.end(), i);
                if(lb == v.end() || *(lb) - i >= 4) {
                    count++;
                    i += 4;
                }
                else {
                    i += 2;
                }
            }
        }
        count += ((n - rows) * 2);
        return count;
    }

II.)the skyline problem:
code:
vector<pair<int, int>> h;
		
        // Convert each building into two segments.
        for (auto b : buildings) {
            h.push_back({b[0], -b[2]});
            h.push_back({b[1], b[2]});
        }
        
        // Sort the segments.
        sort(h.begin(), h.end());
        int prev = 0, cur = 0;
        
        multiset<int> m;
        vector<vector<int>> res;
        
        m.insert(0);
        for (auto i:h) {
            
            // If i.second is less than zero, then it means it is left boundary.
            if (i.second < 0) {
                m.insert(-i.second);
            } else { // else it is right boundary.
                m.erase(m.find(i.second));
            } 
            
            cur = *m.rbegin();
            
            // If current maximum height is not equal to maximum previuous height, it is a key point.
            if (cur != prev) {
                res.push_back({i.first, cur});
                prev = cur;
            }
        }
        return res;
III.)minimum cost of path with special roads
  code:
  #define INF INT_MAX;
class Solution {
public:
    int minimumCost(vector<int>& start, vector<int>& target, vector<vector<int>>& specialRoads) {

        set<vector<int>>     points;
        map<vector<int>,int> distance;
        map<vector<int>,int> specialDis;
         
        points.insert(start);   distance[start]=INF;
        points.insert(target);  distance[target]=INF;
        
        
        for(int i=0;i<specialRoads.size();++i){
            
            int x1=specialRoads[i][0];
            int y1=specialRoads[i][1];
            int x2=specialRoads[i][2];
            int y2=specialRoads[i][3];
            int dis=specialRoads[i][4];
            
            points.insert({x1,y1});
            points.insert({x2,y2});
            
            if(specialDis.find({x1,y1,x2,y2})==specialDis.end())             
            specialDis[{x1,y1,x2,y2}]=dis;
            else
            specialDis[{x1,y1,x2,y2}]=min(specialDis[{x1,y1,x2,y2}],dis);
                
            distance[{x1,y1}]=INF;
            distance[{x2,y2}]=INF;       
        }
        
        priority_queue<vector<int>,vector<vector<int>>, greater<vector<int>>> q;
        q.push({0,start[0],start[1]});
        
        while(!q.empty()){
              
            vector<int> u=q.top(); q.pop();
            int x1=u[1];
            int y1=u[2];
            int curr_dis=u[0];
        
            if(x1==target[0] && y1==target[1]) return curr_dis;
            
            for(auto itr=points.begin();itr!=points.end();itr++){
                
                vector<int> v=(*itr);
                if(u==v) continue;
                
                int x2=v[0];
                int y2=v[1];
                int cost1=(abs(x2-x1) + abs(y2-y1)); 
                int cost2=INT_MAX;
                
                // checking is this any special road
                if(specialDis.find({x1,y1,x2,y2})!=specialDis.end()){
                   cost2=specialDis[{x1,y1,x2,y2}];
                }
                
                int weight=min(cost1,cost2);
                 
                if(curr_dis + weight < distance[{x2,y2}] ){ 
                    distance[{x2,y2}]=curr_dis + weight;
                    q.push({distance[{x2,y2}],x2,y2});
                }                 
            }
         }
        
        return 0;
    }
};
