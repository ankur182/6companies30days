I.) Special Permutations
code:
class Solution {
public:
    long long dp[14][(1<<14)];
    int mod=1e9+7;
    long long solve(int prevValidx, int mask, vector<int>&nums){
        if(mask+1 ==(1<<nums.size()))return 1;
        if(dp[prevValidx][mask]!=-1)return dp[prevValidx][mask];
        long long ans=0;
        for(int i=0;i<nums.size();i++){
            int val=nums[prevValidx];
            if((mask&(1<<i))==0 && (val%nums[i]==0 || nums[i]%val==0)){
                int newmask=(mask|(1<<i));
                long long temp =solve(i,newmask,nums);
                ans=(ans+temp)%mod;
            }
        }
        return dp[prevValidx][mask]=ans;
    }

    int specialPerm(vector<int>& nums) {
        int n=nums.size();
        memset(dp,-1,sizeof(dp));
        long long ans=0;
        for(int i=0;i<n;i++){
            int mask=(1<<i);
            ans=(ans+solve(i,mask,nums))%mod;
        }
        return ans;
    }
};

II.)MATRIX XELL IN A DISTANT ORER
  code:
//manhattan distance: |rx-r0|+|cx-c0| 
//use manhattan to sort the coordinated accordingly
    
    vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {
        auto comp = [r0, c0](vector<int> &a, vector<int> &b)
        {
            return abs(a[0]-r0) + abs(a[1]-c0) < abs(b[0]-r0) + abs(b[1]-c0);
        };    
        vector<vector<int>> resp;
        for(int i=0 ; i<R ; i++)
        {
            for(int j=0; j<C ; j++)
            {
                resp.push_back({i, j});
            }
        }
        sort(resp.begin(), resp.end(), comp);
        return resp;
    }

III.)Longest word in dictionary through deleting
COde:
string findLongestWord(string s, vector<string>& dic) {
        sort(dic.begin(),dic.end());
        string ans="";
        for(auto &it:dic){
            int j=0;
            for(int i=0;i<s.size();i++){
                if(s[i]==it[j]){
                    j++;
                }
                if(j==it.size()){
                    if(it.size()>ans.size())ans=it;
                    break;
                }
            }
        }
        return ans;
    }
