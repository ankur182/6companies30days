I.) Image Smoother
CODE:-
 vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int n = img.size();
        int m = img[0].size();
        
        int dx[] = { -1 , 1 ,  0  , 0 , -1  , -1  ,  1  , 1  };
        int dy[] = { 0  , 0 , -1  , 1 , -1  ,  1  , -1  , 1  };

        //         { U  , D ,  L  , R , UL  , UR  , DL  , DR }
        
        auto valid = [&](int x, int y) -> bool {
            if(x < 0 or x >= n or y < 0 or y >= m)
                return 0;
            
            return 1;
        };
        
        vector<vector<int>> ans(n, vector<int> (m));
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                int sum = img[i][j];
                int count = 1;
                
                for(int p = 0; p < 8; p++){
                    int nx = i + dx[p];
                    int ny = j + dy[p];
                    
                    if(valid(nx, ny)){
                        sum += img[nx][ny];
                        ++count;
                    }
                }
                
                ans[i][j] = sum / count;
            }
        }
        
        return ans;
    }

II.) count the number of incremovable subarrays
CODE:
class Solution {
public:
// to check the subarray is strictly increasing
    bool check(vector<int>cnums){
        for(int i=1;i<cnums.size();i++){
            if(cnums[i]<=cnums[i-1])return false;
        }
        return true;
    }
    int incremovableSubarrayCount(vector<int>& nums) {
        int n=nums.size(),ans=0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                //i have my subarray as i to j
                //new array->[0... i-1]&[j+1,..n-1]
                vector<int>cnums;

                for(int k=0;k<i;k++){
                    cnums.push_back(nums[k]);
                }
                for(int k=j+1;k<n;k++){
                    cnums.push_back(nums[k]);
                }
                if(check(cnums))ans++;
            }
        }
        return ans;
    }
};

III.)CIRCLE AND RECTANGLE OVERLAPPING
CODE:
class Solution {
public:
//hint: Locate the closest point of the square to the circle, you can then find the distance from this point to the center of the circle and check if this is less than or equal to the radius.
    bool checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {
        for(int i=x1;i<=x2;i++){
            for(int j=y1;j<=y2;j++){
                double p=(i-xCenter)*(i-xCenter)+(j-yCenter)*(j-yCenter);
                double r=radius*radius;
                if(p<=r)return true;
            }
        }
        return false;
    }
};

IV.) FInd the winner of the circular game
CODE:
int findTheWinner(int n, int k) {
        queue<int>q;
        for(int i=1;i<=n;i++){
            q.push(i);
        }
        //1 2 3 4 5
        while(q.size()!=1){
            int i=1;
            while(i<k){
                int f=q.front();
                q.pop();
                q.push(f);
                i++;
            }
            q.pop();

        }
        return q.front();
    }
