I.)Find the city with smallest neighbours at a threshold distance
code:
int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        
        vector<vector<int>> dist(n,vector<int>(n,1e9));
        //creating asjancy matrix
        for(auto node : edges){
            dist[node[0]][node[1]] = node[2];
            dist[node[1]][node[0]] = node[2];

        }
        //setting distance of node to itself = 0 
        for(int i=0;i<n;i++) dist[i][i]=0;
        //applying Floyd Warshall algorithm to find min distance between each node
        for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                 if((dist[i][j] > dist[i][k] + dist[k][j]) && dist[i][k] !=1e9 && dist[k][j] !=1e9){
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
        vector<int> Number_of_reachable_Cities(n,0);
        
        //traversing the distance 2D array to find the number of cities whose  
        //min distance  from city i is less than and equal to distanceThreshold
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i==j) continue;
                if(dist[i][j]<=distanceThreshold){
                     Number_of_reachable_Cities[i]++;  
                }
            }
        }

        int mn=1e9;
        // find the minimum in Number_of_reachable_Cities this wil help to find
        // smallest all the cities 
        for(int i=0;i<n;i++){ 
            mn = min(mn,Number_of_reachable_Cities[i]);
        }
        int mx=-1;
        //finding  city with the greatest number If there are multiple such cities
        for(int i=0;i<n;i++){
            if(Number_of_reachable_Cities[i] == mn) mx = max(mx,i);  
        }
        return mx;
    }

II.)find the beautiful indices in a given array I
code:
class Solution {
public:
    vector<int> prefixString(string s){
        int start=0, end=1;
        vector<int>pi(s.size());
        pi[0]=0;
        while(end<s.size()){
            if(s[start]==s[end]){
                pi[end]=start+1;
                start++;
                end++;
                
            }
            else{
                if(start!=0){
                    start=pi[start-1];
                }
                else{
                    pi[end]=0;
                    end++;
                }
            }
            
            
        }

        return pi;
    }

    vector<int> matchingIndex(string test, string pat){
        vector<int> pi=prefixString(pat);
        //for(auto x: pi)
            //cout<<x<<endl;
            vector<int> res;
            int i=0,j=0;
            while(i<test.size()){
                if(test[i]==pat[j]){
                    i++;
                    j++;
                }
                else{
                    if(j!=0)
                        j=pi[j-1];
                    else
                        i++;
                }

                if(j==pat.size()){
                    res.push_back(i-pat.size());
                    j=pi[j-1];
                }

            }
            return res;

    }
    vector<int> beautifulIndices(string s, string a, string b, int k) {
        
        vector<int> v1=matchingIndex(s,a);
        vector<int> v2=matchingIndex(s,b);
        
        cout<<v1.size()<<v2.size();

        vector<int> res;

        for(int i=0,j=0;i<v1.size();i++){
            while(j<v2.size() && v1[i]>v2[j] && abs(v1[i]-v2[j])>k)
                j++;
            if(j<v2.size() && abs(v1[i]-v2[j])<=k)
                res.push_back(v1[i]);
        }

        return res;

    }
};

III.)counts words obtained after adding a letter
code:
class Solution
{
    public:
    unordered_set<string> st;
    bool isPossible(string& s)
    {
        int n=s.length();
        //take all possible string by removing 1 character and search them in given set
        for (int i=0;i<n;i++)
        {
            string temp="";
            for (int j=0;j<n;j++)
            {
                if (j==i)
                    continue;
                temp.push_back(s[j]);
            }
            if (st.find(temp)!=st.end())
                return true;
        }
        return false;
    }
    int wordCount(vector<string>& arr, vector<string>& target)
    {
        int n=target.size();
        for (auto& i:arr)
        {
            sort(i.begin(),i.end());  //Sort all strings and insert them in set
            st.insert(i);
        }
        
        int count=0;
        for (int i=0;i<n;i++)
        {
            sort(target[i].begin(),target[i].end());
            if (isPossible(target[i]))
                count++;
        }
        return count;
    }
};
