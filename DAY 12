I.) MAXIMUM LENGTH OF REPEATED SUBARRAY
CODE:

int t[1001][1001];    
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || j==0){
                    t[i][j]=0;
                }
            }
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(nums1[i-1]==nums2[j-1]){
                    t[i][j] = 1+t[i-1][j-1];
                    ans = max(ans,t[i][j]);
                }
                else{
                    t[i][j]=0;
                }
            }
        }
        return ans;
    }

II.)ROTATE FUNCTION:
CODE:
int maxRotateFunction(vector<int>& nums)
    {
        int ans=INT_MIN;
        int n=nums.size();
        int sum=0;
        int sum2=0;
        for (int i=0;i<n;i++)
        {
            sum+=nums[i];
            sum2+=nums[i]*i;
        }
        for (int i=n-1;i>=0;i--)
        {
           sum2=sum2-(nums[i]*(n-1))+(sum-nums[i]);
           ans=max(ans,sum2);
        }
        return ans;
    }

III.)Amount of time the binary tree to be infected
CODE:

int findTime( map<TreeNode*, TreeNode*>& mp,TreeNode* target){
        queue<TreeNode*> q;
        q.push(target);
        map<TreeNode*,int> vis;
        vis[target]=1;
        int minT=0;
        while(!q.empty()){
            int sz=q.size();
            int fl=0;
            for(int i=0;i<sz;i++){
                auto node=q.front();
                q.pop();
                if(node->left && !vis[node->left]){
                    fl=1;
                    vis[node->left]=1;
                    q.push(node->left);
                }
                if(node->right && !vis[node->right]){
                    fl=1;
                    vis[node->right]=1;
                    q.push(node->right);
                }
                if(mp[node] && !vis[mp[node]]){
                    fl=1;
                    vis[mp[node]]=1;
                    q.push(mp[node]);
                }
            }
            if(fl) minT++;
        }
        return minT;
    }
    TreeNode* bfsMapParents(TreeNode* root, map<TreeNode*, TreeNode*>& mp,int start){
        queue<TreeNode*>q;
        q.push(root);
        TreeNode* res;
        while(!q.empty()){
            auto node=q.front();
            if(node->val==start) res=node;
            q.pop();
            if(node->left){
                mp[node->left]=node;
                q.push(node->left);
            }
            if(node->right){
                mp[node->right]=node;
                q.push(node->right);
            }
        }
        return res;
    }
    int amountOfTime(TreeNode* root, int start) {
        map<TreeNode*, TreeNode*> mp;
        TreeNode* target=bfsMapParents(root,mp,start);
        int minT=findTime(mp,target);
        return minT;
    }
