I.) K-diff pairs in an array
code:
int findPairs(vector<int>& nums, int k) {
        if(k<0)return 0;
        unordered_map<int,int>mp;
        for(auto it:nums)mp[it]++;
        int cnt=0;
        for(auto it:mp){
            cnt+=(k!=0 && mp.count(it.first-k)|| (k == 0 && it.second >= 2));
        }
        return cnt;
    }

II.)friends with appropriate ages
code:
int numFriendRequests(vector<int>& ages) {
       sort(ages.begin(),ages.end());
        int count =0;
        for(int i=0;i<ages.size();i++)
        {
             int val=ages[i]/2+7;
            if(ages[i]<=val) //invalid condition
                continue;
            
            int ind1=upper_bound(ages.begin(),ages.end(),val)-ages.begin();
            int ind2=upper_bound(ages.begin(),ages.end(),ages[i])-ages.begin();
            
            ind2--;         //because upper bound will give val greater than ages[i] soo we need to decrement ind2 to get 
            if(ind2>=ind1)    // val<=ages[i]
                count+=ind2-ind1;
            
         }
        
        return count;
    }

III.) find the number of square free subsets
code:
class Solution {
public:
    int squareFreeSubsets(vector<int>& nums) {
        using ll = long long;
        map<ll,ll> mp;
        int MOD = 1e9 + 7;
        
        for(int num : nums) {
            bool flag = false;
            
            for(int i=2; i<=5; i++) {
                if(num % (i*i) == 0) {
                    flag = true;
                    break;
                }
            }
            
            if(flag) continue;
            
            vector<pair<ll,ll>> temp;
            
            for(auto [k, v] : mp) {
                if(__gcd(k, (ll)num) == 1) {
                    temp.push_back({k*num, v});
                }
            }
            
            for(auto [k, v] : temp) {
                mp[k] = (mp[k] + v)%MOD;
            }
            
            mp[num] = (mp[num] + 1)%MOD;
        }
        
        int result = 0;
        
        for(auto [k, v] : mp) {
            result = (result + v)%MOD;
        }
        
        return result;
    }
};
